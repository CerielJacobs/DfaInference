<project
    name="satin-app"
    default="jar"
    basedir=".">

    <description>
	Ibis satin application build
    </description>

    <!--
        Requires definition of 'satin-classes': a comma-separated list of class
	    names that must be rewritten.
	Optional definition of 'satinc-flags': extra options to be supplied
	    to Ibisc.
	Backwards compatibility: instead of 'satin-classes', 'satin-main-class'
	    and 'satin-so-class' are also recognized.
    -->

    <property environment="env"/>
    <property name="satin"       location="${env.SATIN_HOME}"/>
    <property name="myclasspath" value="${env.CLASSPATH}"/>

    <property name="tmp"         value="tmp"/>
    <property name="lib"         value="lib"/>

    <basename file="." property="application-name" />

    <target name="set-classpath" unless="classpath.initialized">
	<path id="default.classpath">
	    <pathelement path="${tmp}"/>
	    <pathelement path="${user-classpath}"/>
	    <pathelement path="${myclasspath}"/>
	    <fileset dir="${satin}/lib">
		<include name="*.jar"/>
	    </fileset>
	</path>
	<echo	message="Now set default.classpath to ${default.classpath}"
		level="verbose"/>
	<property name="classpath.initialized" value="true"/>
    </target>

    <target name="property-init"
	    depends="set-classpath">
    </target>

    <target name="init" depends="property-init">
        <tstamp />
        <mkdir dir="${tmp}" />
        <mkdir dir="${lib}" />
    </target>

    <target name="compile" depends="clean,init"
	    description="Compile application without any bytecode rewriting">
	<javac destdir="${tmp}" debug="true" srcdir=".">
	    <classpath refid="default.classpath" />
	    <!--
	    <compilerarg value="-Xlint:unchecked"/>
	    -->
            <include name="**/*.java" />
        </javac>
    </target>

    <target name="satin-internal">
	<java	classname="ibis.frontend.Ibisc"
		taskname="Ibisc"
		dir="${tmp}"
		failonerror="true"
		maxmemory="512M"
		fork="true">
		<arg line="${satinc-flags.value} ${satin-so} ${satin-main} ${satin-classes.value} ."/>
		<classpath refid="default.classpath"/>
	</java>

    </target>

    <target name="set-satinc-flags-set" if="satinc-flags">
	<property name="satinc-flags.value" value="${satinc-flags}"/>
    </target>

    <target name="set-satinc-flags-notset" unless="satinc-flags">
	<property name="satinc-flags.value" value=""/>
    </target>

    <target name="set-satinc-main" if="satin-main-class">
	<property name="satin-main" value="-satin &quot;${satin-main-class}&quot;"/>
    </target>

    <target name="set-satinc-main-notset" unless="satin-main-class">
	<property name="satin-main" value=""/>
    </target>

    <target name="set-satinc-so" if="satin-so-class">
	<property name="satin-so" value="-satin &quot;${satin-so-class}&quot;"/>
    </target>

    <target name="set-satinc-so-notset" unless="satin-so-class">
	<property name="satin-so" value=""/>
    </target>

    <target name="set-satinc-classes" if="satin-classes">
	<property name="satin-classes.value" value="-satin &quot;${satin-classes}&quot;"/>
    </target>

    <target name="set-satinc-classes-notset" unless="satin-classes">
	<property name="satin-classes.value" value=""/>
    </target>

    <target name="satin"
	depends="set-satinc-flags-set,set-satinc-flags-notset,set-satinc-main-notset,set-satinc-main,set-satinc-classes,set-satinc-classes-notset,set-satinc-so-notset,set-satinc-so,satin-internal">
    </target>

    <target name="build"
	description="Compile Satin application for parallel execution"
	depends="compile,satin"/>

    <target name="jar" depends="build" description="Build a Jar file for an application">
	<jar destfile="${lib}/${application-name}.jar" basedir="${tmp}" includes="**/*.class">
        </jar>
        <delete dir="${tmp}" />
    </target>

    <target name="compile-jar" depends="compile" description="Build a Jar file for an application">
	<jar destfile="${lib}/${application-name}.jar" basedir="${tmp}" includes="**/*.class">
        </jar>
        <delete dir="${tmp}" />
    </target>

    <property name="java-args" value="" />

    <target name="set-ibis-name">

        <condition property="ibis-name" value="tcp">
            <not>
                <isset property="ibis-name" />
            </not>
        </condition>

        <condition property="define-ibis-name" value="&quot;-Dibis.name^=${ibis-name}&quot;">
            <os family="windows" />
        </condition>
        <condition property="define-ibis-name" value="-Dibis.name=${ibis-name}">
            <not>
                <isset property="define-ibis-name" />
            </not>
        </condition>
    </target>

    <target name="run2" depends="set-ibis-name">
        <exec dir="${basedir}" executable="${satin}/bin/ibis-satin-run" vmlauncher="false" spawn="true">
            <arg line="-Dibis.pool.size=2" />
            <arg line="-Dibis.pool.name=test-pool" />
            <arg line="-Dibis.server.address=localhost:8888" />
            <arg value="${define-ibis-name}" />
            <arg line="${java-args} ibis.util.Postpone 2 -o ant-test.out ${runjob}" />
        </exec>
        <exec dir="${basedir}" executable="${satin}/bin/ibis-satin-run" timeout="500000" failonerror="true" vmlauncher="false">
            <arg line="-Dibis.pool.size=2" />
            <arg line="-Dibis.pool.name=test-pool" />
            <arg line="-Dibis.server.address=localhost:8888" />
            <arg value="${define-ibis-name}" />
            <arg line="${java-args} ${runjob}" />
        </exec>
    </target>

    <target name="do-prun" depends="set-ibis-name">
        <condition property="prun-nprocs" value="2">
            <not>
                <isset property="prun-nprocs" />
            </not>
        </condition>
        <echo message="Running parallel test on ${prun-nprocs} nodes, ${ibis-name} Ibis" />

	<property name="ibis"        location="${env.IBIS_HOME}"/>

        <exec dir="${basedir}" executable="/usr/local/VU/reserve.sge/bin/prun" vmlauncher="false">
	    <arg value="COMMAND=${satin}/bin/ibis-satin-run" />
            <arg line="-1 ${ibis}/bin/ibis-prun ${prun-nprocs}" />
            <arg value="${define-ibis-name}" />
            <arg line="${java-args} ${runjob}" />
        </exec>
    </target>

    <target name="run1" depends="set-ibis-name">
        <exec dir="${basedir}" executable="${satin}/bin/ibis-satin-run" timeout="500000" failonerror="true" vmlauncher="false">
            <arg line="-Dibis.pool.size=1" />
            <arg line="-Dibis.pool.name=test-pool" />
            <arg line="-Dibis.server.address=localhost:8888" />
            <arg value="${define-ibis-name}" />
            <arg line="${java-args} ${runjob}" />
        </exec>
    </target>

    <target name="runseq">
        <exec dir="${basedir}" executable="${satin}/bin/ibis-satin-run" timeout="500000" failonerror="true" vmlauncher="false">
            <arg line="${java-args} ${runjob}" />
        </exec>
    </target>

    <target name="set-par-jargs-def" unless="test-par-java-args">
        <property name="jargs" value="" />
    </target>

    <target name="set-par-jargs-par" if="test-par-java-args">
        <property name="jargs" value="${test-par-java-args}" />
    </target>

    <target name="set-par-jargs" depends="set-par-jargs-def,set-par-jargs-par" />

    <target name="set-seq-jargs-def" unless="test-seq-java-args">
        <property name="jargs" value="" />
    </target>

    <target name="set-seq-jargs-seq" if="test-seq-java-args">
        <property name="jargs" value="${test-seq-java-args}" />
    </target>

    <target name="set-seq-jargs" depends="set-seq-jargs-def,set-seq-jargs-seq" />

    <target name="test-par" description="Run a parallel test if the property 'test-par-run' is set" depends="set-par-jargs" if="test-par-run">
        <echo message="Running parallel test on two JVM instances" />
        <antcall target="run2">
            <param name="runjob" value="${test-par-run}" />
            <param name="java-args" value="${jargs}" />
        </antcall>
        <echo message="Output of 2nd JVM" />
        <concat>
            <fileset dir="." includes="ant-test.out" />
        </concat>
    </target>

    <target name="test-prun" description="Run a parallel test with prun if the property 'test-par-run' is set" depends="jar,set-par-jargs" if="test-par-run">
        <antcall target="do-prun">
            <param name="runjob" value="${test-par-run}" />
            <param name="java-args" value="${jargs}" />
        </antcall>
    </target>

    <target name="test-seq" if="test-seq-run" depends="set-seq-jargs" description="Run a sequential test if the property 'test-seq-run' is set">
        <echo message="Running sequential test" />
        <antcall target="run1">
            <param name="runjob" value="${test-seq-run}" />
            <param name="java-args" value="${jargs}" />
        </antcall>
    </target>

    <!-- Default test target, for if the application does not have one.
	 Does test-par as well as test-seq.
    -->

    <target name="build-and-test" depends="jar, test-seq, test-par"/>

    <target name="test" unless="no-test" description="Build, run sequential test, run parallel test">
        <antcall inheritRefs="true" target="build-and-test" />
    </target>

    <target name="clean" description="Clean up the build">
        <delete dir="${tmp}" />
        <delete dir="${lib}" />
        <delete file="ant-test.out" />
    </target>

</project>
